Field Validation Test Cases
Title Field Tests
Verify Title field is mandatory and displays error if empty

Test maximum character length restrictions

Validate special character handling

Test duplicate title validation if applicable

Data Type Field Tests (Multi-select)
Verify at least one Data Type must be selected

Test multiple selection functionality

Select multiple values

Deselect values

Select all/Deselect all if available

Validate error message when no option is selected

Test maximum number of selections allowed

Verify selected values are properly displayed

Owners Field Tests
Verify minimum 2 owners requirement

Test error message when adding only 1 owner

Validate successful case with 2+ owners

Test owner search/selection functionality

Test removal of owners

Prevent removal if it would result in less than 2 owners

Verify duplicate owner prevention

Test owner field validation messages

Enable Public Access Toggle Tests
Test popup appearance when toggle is enabled

Verify all checkboxes in popup are mandatory

Test submission with missing checkboxes

Verify error messages

Test justification field in popup

Verify it's mandatory

Test character limits

Test empty submission

Verify popup can be cancelled

Test successful submission with all requirements met

External Sharing Tests
Test Enable/Disable External Sharing toggle

Domain Input Validation:

Test single domain input

Test multiple domain inputs

Verify domain format validation (e.g., example.com)

Test invalid domain formats

Test duplicate domain prevention

Verify domain removal functionality

Test maximum number of allowed domains

Validate error messages for invalid domains

Dropdown Field Tests (Division, Function, Country, etc.)
Verify all dropdown fields are mandatory

Test error messages when no selection is made

For each dropdown:

Test single selection functionality

Verify selected value is properly displayed

Test search functionality if available

Verify dropdown list is complete and accurate

Business Criticality Tests
Verify selection is mandatory

Test different criticality level selections

Validate impact on other fields based on selection

Data Privacy Tests
Verify selection is mandatory

Test different privacy level selections

Validate related field dependencies

Integration Test Cases
Save Operation Tests
Verify all mandatory fields must be filled before save

Test save operation with minimum required fields

Test save operation with all fields filled

Verify proper error handling for invalid combinations

Test save operation with maximum allowed values

Cancel Operation Tests
Verify changes are discarded on cancel

Test cancel confirmation dialog if implemented

Verify return to previous state

Error Handling Tests
Test field-level error messages

Verify form-level error messages

Test error message clarity and accuracy

Verify error state styling

Test error recovery paths

Performance Tests
Test response time for field validations

Verify dropdown load times

Test multi-select performance with maximum selections

Verify domain validation response time


Service Integration Tests
Initial Page Load Tests
Verify service call with correct ID and group type parameters

Test URL format: /inventory/teams/{id}?groupType={type}

Validate correct parsing of URL parameters

Test response handling for different group types:

Teams (28)

Engage (6)

Sharepoint (3)

Streams (1)

Planner (2)

Others (20)

Verify error handling for invalid ID/group type combinations

Deep Linking Tests
Test direct URL access scenarios:

Valid ID and group type

Invalid ID with valid group type

Valid ID with invalid group type

Missing parameters

Verify URL parameter encoding/decoding

Test browser history navigation

Back button functionality

Forward button functionality

Verify URL sharing functionality

Test bookmark accessibility

Data Loading Tests
Verify loading state indicators

Test service timeout scenarios

Validate error state handling:

404 Not Found

403 Forbidden

500 Server Error

Test data refresh on URL parameter change

Service Response Validation
Verify all required fields are present in service response:

Title

URL

Division

Function

Country

Data Type

Business Criticality

Data Privacy

Owners list

Test handling of partial data responses

Validate data type conversions

Test response caching if implemented

State Management Tests
Verify state persistence during tab navigation

Test state recovery after browser refresh

Validate form state management with URL parameters

Test concurrent request handling

Performance Tests
Measure initial page load time

Test response time for different group types

Verify service call optimization

Test caching effectiveness

Monitor network payload size

Security Tests
Verify authentication requirements for deep links

Test authorization for different user roles

Validate URL parameter sanitization

Test cross-site scripting prevention

Verify secure service communication

Browser Compatibility Tests
Test deep linking across different browsers

Verify URL handling in mobile browsers

Test service integration across browsers

Validate responsive behavior with URL parameters

Save Operation Tests
Verify successful form submission with all valid fields:

All mandatory fields filled

Data Type selections made

Minimum 2 owners added

All required checkboxes selected (if applicable)

Valid domain entries (if external sharing enabled)

Page Reload Validation
Verify page automatically reloads after successful save

Confirm all fields switch to read-only mode after reload

Validate displayed data matches the recently saved values:

Title shows "My Guest Team Testing-[External]"

Division shows "Finance"

Function shows "DATA, DIGITAL & IT"

Country shows "Switzerland"

Data Type shows "Application Data & Interfaces"

Business Criticality shows "Low"

Data Privacy shows "N/A"

Owners list displays correctly

UI State Tests
Verify Edit and Delete buttons are visible after reload

Confirm all toggle switches are in correct read-only state

Validate all fields are non-editable

Test that URL remains unchanged after reload

Data Consistency Tests
Verify service call returns updated data

Compare saved data with displayed data after reload

Validate no data loss during reload process

Confirm all classifications and settings are preserved

Error Handling
Test page behavior if reload fails

Verify error message display if service unavailable

Test recovery mechanism if page reload interrupted



//first query with hardcoded data
//^(?!\s*$)([a-zA-Z0-9.-]+\.[a-zA-Z]{2,})(;[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})*$

{
  user(id: "23"){
    id,
    firstName,
    age
  }
}

// more
{
  user(id: "34") {
    id
    firstName
    age
    company {
      id
      name
      description
    }
  }
  company(id: "2") {
    id
    name
    description
    users {
      id
      firstName
      company {
        id
        name
        description
      }
    }
  }
}


// query fragment
// apple is just a reference name of query
{
  apple: company(id: 1){
    ...companyDetailFragment
  }
}

fragment companyDetailsFragment on Company{
  id
  name
  description
}

// mutation query
mutation{
  addUser(firstName: "Test User2", age: 35){
    firstName
    age
    id
  }
}

// deleteUser and editUser mutation tests

# mutation{
#   addUser(firstName: "Test User3", age: 15){
#     firstName
#     age
#     id
#   }
# }

# mutation{
#   deleteUser(userId: "A9I6fRP"){
#     id
#     firstName
#     age
#   }
# }

# {
#   user(id: "sCXS9DN"){
#     id
#     firstName
#     age
#   }
# }

mutation{
  editUser(userId: "sCXS9DN", firstName: "User 3"){
    id,
    firstName
  }
}


---

// Types.ts
export interface MeetingRoomType {
  ID: string;
  MeetingCount: number;
  DisplayName: string;
  EmailAddress: string;
  Records: number;
}

export interface MeetingRoomDetailPayload {
  MeetingId: string;
  startDate: string;
  endDate: string;
}

// Optimized date-related interfaces
export interface DateTimeInfo {
  dateTime: string;
  timeZone: string;
}

export interface EmailAddress {
  name: string;
  address: string;
}

export interface MeetingRoomGridRecordType {
  start: DateTimeInfo;
  end: DateTimeInfo;
  organizer: {
    emailAddress: EmailAddress;
  };
}

// Constants
export const ITEMS_PER_PAGE = 10;
export const DATE_FORMAT = 'DD/MM/YYYY hh:mm A';

// Context.tsx
import React, { createContext, useContext, useMemo, useCallback } from 'react';

interface MeetingRoomContextType {
  meetingInfo: MeetingRoomType | null;
  setMeetingInfo: (value: MeetingRoomType) => void;
  meetingRooms: MeetingRoomType[];
  meetingDetailParam: MeetingRoomDetailPayload | null;
  setMeetingDetailParam: (param: MeetingRoomDetailPayload) => void;
  searchString: string;
}

const MeetingRoomContext = createContext<MeetingRoomContextType>({
  meetingInfo: null,
  setMeetingInfo: () => undefined,
  meetingRooms: [],
  meetingDetailParam: null,
  setMeetingDetailParam: () => undefined,
  searchString: '',
});

// Custom hooks for context
export const useMeetingRoomCtx = () => useContext(MeetingRoomContext);

// MeetingRoomList.tsx
import React, { memo, useCallback } from 'react';
import { List, Input } from '@/components/ui/list';

interface MeetingRoomListProps {
  onPageChange: (pageNo: number) => void;
  onSearch: (value: string) => void;
}

export const MeetingRoomList = memo(({ onPageChange, onSearch }: MeetingRoomListProps) => {
  const { meetingRooms, setMeetingInfo } = useMeetingRoomCtx();
  
  const data = useMemo(() => 
    meetingRooms.map((meeting, index) => ({
      index,
      key: meeting.ID,
      content: <div><strong>{meeting.DisplayName}</strong></div>,
      endMedia: <ArrowRightIcon />,
      contentMedia: <PageRightIcon />
    })), [meetingRooms]);

  const handleSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    onSearch(e.target.value);
  }, [onSearch]);

  return (
    <div className="meeting-room-list">
      <Flex className="p-5">
        <Input
          icon={<SearchIcon />}
          clearable
          placeholder="Search..."
          fluid
          onChange={handleSearchChange}
        />
      </Flex>
      {data.length > 0 ? (
        <List
          selectable
          items={data}
          onSelectedIndexChange={useCallback(({ selectedIndex }) => {
            setMeetingInfo(meetingRooms[selectedIndex]);
          }, [meetingRooms, setMeetingInfo])}
        />
      ) : (
        <span>No records found</span>
      )}
    </div>
  );
});

MeetingRoomList.displayName = 'MeetingRoomList';

// MeetingRoomForm.tsx
import React, { memo, useCallback } from 'react';
import moment from 'moment';

export const MeetingRoomForm = memo(() => {
  const { meetingInfo, selectedDate, setSelectedDate } = useMeetingRoomCtx();
  
  const handleDateChange = useCallback((value: { startDateOnly: string, endDateOnly: string }) => {
    if (value?.startDateOnly && value?.endDateOnly) {
      setSelectedDate({
        startDate: value.startDateOnly,
        endDate: value.endDateOnly
      });
    }
  }, [setSelectedDate]);

  const startDate = useMemo(() => 
    new Date(new Date().setDate(new Date().getDate())), 
    []
  );

  return (
    <div className="meeting-room-form-container">
      <div className="meeting-room-info-form meeting-room-panel">
        <div className="meeting-room-form-item">
          <Text>Display Name</Text>
          <TextField value={meetingInfo?.DisplayName || ""} />
        </div>
        <div className="meeting-room-form-item">
          <Text>Primary SMTP Address</Text>
          <TextField value={meetingInfo?.EmailAddress || ""} />
        </div>
      </div>

      <Divider className="pr-10" />

      <div className="meeting-room-action-form meeting-room-panel">
        <RangeSelectorComponent
          isToggleable={false}
          startDateValue={startDate}
          allowFutureDateSelection={true}
          isDisabled={selectedDateType === MeetingRoomCheckBoxItem.Today}
          onValueChange={handleDateChange}
        />
      </div>
    </div>
  );
});

MeetingRoomForm.displayName = 'MeetingRoomForm';

// MeetingRoomTableComponent.tsx
import React, { memo, useCallback } from 'react';
import { Table } from '@/components/ui/table';

export const MeetingRoomTableComponent = memo(() => {
  const { list, meetingDetailParam } = useMeetingRoomCtx();

  const rowData = useMemo(() => list.map((item, index) => ({
    key: index,
    items: [
      item?.start?.dateTime ? moment(item.start.dateTime).format(DATE_FORMAT) : "",
      item?.end?.dateTime ? moment(item.end.dateTime).format(DATE_FORMAT) : "",
      item?.organizer?.emailAddress?.name || ""
    ]
  })), [list]);

  const header = {
    key: 'header',
    items: [
      { content: <strong>Start Date</strong>, key: 'startDate' },
      { content: <strong>End Date</strong>, key: 'endDate' },
      { content: <strong>Organizer</strong>, key: 'organizer' }
    ]
  };

  return (
    <div className="meeting-room-panel">
      {progress && <div className="meeting-room-table-spinner"><Spinner size={2} /></div>}
      <Table 
        compact 
        header={header} 
        rows={rowData} 
        aria-label="Meeting room table"
      />
      {!list.length && <div>No records found</div>}
    </div>
  );
});

MeetingRoomTableComponent.displayName = 'MeetingRoomTableComponent';

// Layout.tsx
export const MeetingRoomLayout = memo(({ SearchQuery = "" }) => {
  const [searchText, setSearchText] = useState("");
  const [pageNumber, setPageNumber] = useState(1);
  const [loading, setLoading] = useState(false);
  const [totalPages, setTotalPages] = useState(0);

  const loadService = useCallback(async (url: string, isSearchStringCall = false) => {
    setLoading(true);
    try {
      const res = await getMeetingRooms(url);
      if (res.status === 200) {
        const meetings = (res.data || []).map((item: any) => ({
          ...item,
        }));
        setMeetingRooms(meetings);
        setTotalPages(Math.round(meetings.length > 0 ? meetings[0].MeetingCount / ITEMS_PER_PAGE : 0));
        if (isSearchStringCall) setPageNumber(1);
      }
    } catch (err) {
      console.error("Error loading meeting rooms:", err);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    setSearchText(SearchQuery);
  }, [SearchQuery]);

  return (
    <div>
      <MeetingRoomHeaderComponent />
      <div className="meeting-room-container">
        <MeetingRoomProvider meetingRooms={meetingRooms} searchString={searchText}>
          <div className="meeting-room-left-pane meeting-room-panel">
            <MeetingRoomList
              onPageChange={handlePageChange}
              onSearch={handleSearch}
            />
            {loading && totalPages > 0 && (
              <div className="meeting-room-list-pagination">
                <Pagination
                  currentPage={pageNumber}
                  totalPages={totalPages}
                  onPageChange={handlePageChange}
                />
              </div>
            )}
          </div>
          <div className="meeting-room-right-pane">
            <MeetingRoomInfoComponent />
          </div>
        </MeetingRoomProvider>
      </div>
    </div>
  );
});

MeetingRoomLayout.displayName = 'MeetingRoomLayout';
