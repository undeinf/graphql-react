To increase the test count, you can expand each test case by considering different test scenarios, edge cases, environments, and user interactions. Here’s how you can expand each:

Status message not visible upon load (CPW-01)

Verify status message on different screen resolutions.
Check message visibility in dark and light themes.
Validate message appearance after refreshing the page.
Test message display with different user roles.
Check behavior when an error occurs vs. a success message.
Labels aren't bold in UI (CPW-02)

Check label visibility on different browsers.
Verify label consistency across mobile and desktop.
Validate labels in different themes or contrast modes.
Check if label styling persists after a refresh.
Verify labels when screen zoom is increased (e.g., 125%, 150%).
Copilot icon missing in popup (CPW-03)

Test across different screen resolutions.
Check if the icon appears on different browsers.
Verify if the icon loads with slow internet connections.
Test if any UI interaction (hover, click) affects the icon.
Validate icon visibility with different user permissions.
OnLoad service call works in both environments (CPW-04)

Test on multiple mobile devices and browsers.
Validate API response times in mobile vs. web.
Verify service behavior when offline or with poor connectivity.
Check if different user roles receive different responses.
Confirm logging and error handling for failed service calls.
Change the validation message position (CPW-05)

Verify placement in different screen sizes.
Check if the message disappears properly after correction.
Test with multiple validation errors at once.
Validate message placement in landscape mode.
Ensure message placement doesn’t break UI elements.
Division hardcoded and sorted (CPW-06)

Check division sorting for different datasets.
Test with a large number of entries (performance testing).
Verify sorting order (ascending, descending).
Check behavior when sorting is disabled.
Test sorting with duplicate values.
On successful submit, disable fields and button (CPW-07)

Verify that fields remain disabled until a new action is triggered.
Check if disabled fields remain visually distinct.
Ensure button remains inactive even after page refresh.
Validate form behavior on slow network conditions.
Test if any keyboard shortcuts override the disabled state.
On submit progress, disable fields (CPW-08)

Check UI behavior when submitting multiple times quickly.
Verify if the UI gets stuck in disabled mode under load.
Test behavior when submission fails.
Ensure fields are enabled again after a failed attempt.
Validate the progress indicator visibility.
Remove "completed" from the top message upon save (CPW-09)

Verify message removal after different save scenarios.
Test if the message reappears after multiple saves.
Ensure message updates correctly in real-time.
Check if removing the message affects accessibility.
Validate behavior on different browsers.
Module parent main content is the same and verified (CPW-10)

Check content consistency across different user roles.
Validate content updates dynamically upon changes.
Compare content in different browser sessions.
Test behavior when switching between modules.
Verify content integrity in different screen sizes.
Save and validation working correctly (CPW-11)

Check save functionality for different form inputs.
Validate behavior with missing or invalid fields.
Test with large data inputs.
Ensure saved data persists after a refresh.
Validate error messages for failed saves.



import React, { useState, useEffect } from 'react';
import {
  Menu,
  MenuTrigger,
  MenuList,
  MenuItem,
  MenuPopover,
  MenuGroup,
  Button,
  Dialog,
  DialogTrigger,
  DialogSurface,
  DialogBody,
  DialogContent,
} from "@fluentui/react-components";
import { List24Regular } from "@fluentui/react-icons";

// Types for menu configuration
interface MenuLabels {
  [key: string]: string[];
}

interface MenuItemConfig {
  label: MenuLabels | string;
  key: string;
  icon?: string;
  isHidden?: boolean;
  isExpanded?: boolean;
  suffix?: string;
  children?: MenuItemConfig[];
}

interface PendingAction {
  actionRequiredPendingCount?: number;
  guestAccessReviewPendingCount?: number;
  certificationPendingCount?: number;
  [key: string]: number | undefined;
}

interface MenuProps {
  menuConfig: MenuItemConfig[];
  pendingAction: PendingAction;
  onMenuItemClick?: (key: string) => void;
}

interface MenuItemsProps extends Omit<MenuProps, 'menuConfig'> {
  items: MenuItemConfig[];
  isMobile: boolean;
}

// Custom hook for detecting mobile screen
const useIsMobile = (): boolean => {
  const [isMobile, setIsMobile] = useState<boolean>(false);

  useEffect(() => {
    const checkMobile = (): void => {
      setIsMobile(window.innerWidth < 768);
    };

    checkMobile();
    window.addEventListener('resize', checkMobile);
    return () => window.removeEventListener('resize', checkMobile);
  }, []);

  return isMobile;
};

// Recursive component to render menu items
const MenuItems: React.FC<MenuItemsProps> = ({ 
  items, 
  pendingAction, 
  onMenuItemClick, 
  isMobile 
}) => {
  if (!items || items.length === 0) return null;

  return items.map((item) => {
    if (item.isHidden) return null;

    const suffixValue = item.suffix ? 
      new Function('pendingAction', `return ${item.suffix}`)(pendingAction) : 
      null;

    const suffix = suffixValue ? ` (${suffixValue})` : '';
    const label = typeof item.label === 'object' ? 
      item.label[Object.keys(item.label)[0]][0] : 
      item.label;

    if (item.children && item.children.length > 0) {
      const visibleChildren = item.children.filter(child => !child.isHidden);
      if (visibleChildren.length === 0) return null;

      return isMobile ? (
        <React.Fragment key={item.key}>
          <MenuItem
            onClick={() => onMenuItemClick?.(item.key)}
            className="font-semibold"
          >
            {label}{suffix}
          </MenuItem>
          <div className="ml-4">
            <MenuItems
              items={visibleChildren}
              pendingAction={pendingAction}
              onMenuItemClick={onMenuItemClick}
              isMobile={isMobile}
            />
          </div>
        </React.Fragment>
      ) : (
        <MenuGroup key={item.key}>
          <MenuItem onClick={() => onMenuItemClick?.(item.key)}>
            {label}{suffix}
          </MenuItem>
          <MenuList>
            <MenuItems
              items={visibleChildren}
              pendingAction={pendingAction}
              onMenuItemClick={onMenuItemClick}
              isMobile={isMobile}
            />
          </MenuList>
        </MenuGroup>
      );
    }

    return (
      <MenuItem
        key={item.key}
        onClick={() => onMenuItemClick?.(item.key)}
      >
        {label}{suffix}
      </MenuItem>
    );
  }).filter(Boolean);
};

// Mobile Menu Component
const MobileMenu: React.FC<MenuProps> = ({ 
  menuConfig, 
  pendingAction, 
  onMenuItemClick 
}) => {
  return (
    <Dialog>
      <DialogTrigger disableButtonEnhancement>
        <Button icon={<List24Regular />} />
      </DialogTrigger>
      <DialogSurface>
        <DialogBody>
          <DialogContent>
            <MenuItems
              items={menuConfig}
              pendingAction={pendingAction}
              onMenuItemClick={onMenuItemClick}
              isMobile={true}
            />
          </DialogContent>
        </DialogBody>
      </DialogSurface>
    </Dialog>
  );
};

// Desktop Menu Component
const DesktopMenu: React.FC<MenuProps> = ({ 
  menuConfig, 
  pendingAction, 
  onMenuItemClick 
}) => {
  return (
    <>
      {menuConfig.map((config) => {
        const buttonSuffixValue = config.suffix ? 
          new Function('pendingAction', `return ${config.suffix}`)(pendingAction) : 
          null;
        const buttonSuffix = buttonSuffixValue ? ` (${buttonSuffixValue})` : '';

        const label = typeof config.label === 'object' ? 
          config.label[Object.keys(config.label)[0]][0] : 
          config.label;

        if (config.isHidden) return null;

        return (
          <Menu key={config.key}>
            <MenuTrigger>
              <Button>
                {label}{buttonSuffix}
              </Button>
            </MenuTrigger>
            <MenuPopover>
              <MenuList>
                <MenuItems
                  items={config.children || []}
                  pendingAction={pendingAction}
                  onMenuItemClick={onMenuItemClick}
                  isMobile={false}
                />
              </MenuList>
            </MenuPopover>
          </Menu>
        );
      })}
    </>
  );
};

const ResponsiveActionsMenu: React.FC<MenuProps> = ({ 
  menuConfig, 
  pendingAction, 
  onMenuItemClick 
}) => {
  const isMobile = useIsMobile();

  return isMobile ? (
    <MobileMenu
      menuConfig={menuConfig}
      pendingAction={pendingAction}
      onMenuItemClick={onMenuItemClick}
    />
  ) : (
    <DesktopMenu
      menuConfig={menuConfig}
      pendingAction={pendingAction}
      onMenuItemClick={onMenuItemClick}
    />
  );
};

export default ResponsiveActionsMenu;

// Example usage:
/*
const menuConfig: MenuItemConfig[] = [{
  label: { MenuLabels: ["MenuKey.Action_Required"] },
  key: "MenuKey.Action_Required",
  icon: "<SetActionIcon />",
  isExpanded: true,
  suffix: "pendingAction?.actionRequiredPendingCount",
  children: [
    {
      label: { MenuLabels: ["MenuKey.Guest_Access_Review"] },
      key: "MenuKey.Guest_Access_Review",
      isHidden: true,
      suffix: "pendingAction?.guestAccessReviewPendingCount",
    },
    {
      key: "MenuKey.Attestation_Paneling_No_Use",
      label: { MenuLabels: ["MenuKey.Attestation_Paneling_No_Use"] },
      children: [
        {
          label: { MenuLabels: ["MenuKey.Attestation_Paneing"] },
          key: "MenuKey.Attestation_Paneing",
          suffix: "pendingAction?.certificationPendingCount",
        },
        {
          label: { MenuLabels: ["MenuKey.Power_Platform_Attestation_Pending"] },
          key: "MenuKey.Power_Platform_Attestation_Pending",
        }
      ]
    }
  ]
}];

const pendingAction: PendingAction = {
  actionRequiredPendingCount: 5,
  guestAccessReviewPendingCount: 2,
  certificationPendingCount: 3
};

<ResponsiveActionsMenu 
  menuConfig={menuConfig}
  pendingAction={pendingAction}
  onMenuItemClick={(key: string) => console.log('Selected:', key)}
/>
*/
