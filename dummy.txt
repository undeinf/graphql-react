import React, { useState, useEffect } from 'react';
import {
  Menu,
  MenuTrigger,
  MenuList,
  MenuItem,
  MenuPopover,
  MenuGroup,
  Button,
  Dialog,
  DialogTrigger,
  DialogSurface,
  DialogBody,
  DialogContent,
} from "@fluentui/react-components";
import { List24Regular } from "@fluentui/react-icons";

// Types for menu configuration
interface MenuLabels {
  [key: string]: string[];
}

interface MenuItemConfig {
  label: MenuLabels | string;
  key: string;
  icon?: string;
  isHidden?: boolean;
  isExpanded?: boolean;
  suffix?: string;
  children?: MenuItemConfig[];
}

interface PendingAction {
  actionRequiredPendingCount?: number;
  guestAccessReviewPendingCount?: number;
  certificationPendingCount?: number;
  [key: string]: number | undefined;
}

interface MenuProps {
  menuConfig: MenuItemConfig;
  pendingAction: PendingAction;
  onMenuItemClick?: (key: string) => void;
}

interface MenuItemsProps extends Omit<MenuProps, 'menuConfig'> {
  items: MenuItemConfig[];
  isMobile: boolean;
}

// Custom hook for detecting mobile screen
const useIsMobile = (): boolean => {
  const [isMobile, setIsMobile] = useState<boolean>(false);

  useEffect(() => {
    const checkMobile = (): void => {
      setIsMobile(window.innerWidth < 768);
    };

    checkMobile();
    window.addEventListener('resize', checkMobile);
    return () => window.removeEventListener('resize', checkMobile);
  }, []);

  return isMobile;
};

// Recursive component to render menu items
const MenuItems: React.FC<MenuItemsProps> = ({ 
  items, 
  pendingAction, 
  onMenuItemClick, 
  isMobile 
}) => {
  if (!items || items.length === 0) return null;

  return items.map((item) => {
    if (item.isHidden) return null;

    const suffixValue = item.suffix ? 
      new Function('pendingAction', `return ${item.suffix}`)(pendingAction) : 
      null;

    const suffix = suffixValue ? ` (${suffixValue})` : '';
    const label = typeof item.label === 'object' ? 
      item.label[Object.keys(item.label)[0]] : 
      item.label;

    if (item.children && item.children.length > 0) {
      const visibleChildren = item.children.filter(child => !child.isHidden);
      if (visibleChildren.length === 0) return null;

      return isMobile ? (
        <React.Fragment key={item.key}>
          <MenuItem
            onClick={() => onMenuItemClick?.(item.key)}
            className="font-semibold"
          >
            {label}{suffix}
          </MenuItem>
          <div className="ml-4">
            <MenuItems
              items={visibleChildren}
              pendingAction={pendingAction}
              onMenuItemClick={onMenuItemClick}
              isMobile={isMobile}
            />
          </div>
        </React.Fragment>
      ) : (
        <MenuGroup key={item
